---
- name: check k8s version
  shell: >
    {{ bin_dir }}/kubectl version -o json | jq '.serverVersion.gitVersion' | sed s/\"//g
  register: kubernetes_version

- name: init k8s version
  set_fact: >
     k8s_version: {{ kubernetes_version.stdout }}

- name: Stop if kuernetes version is nonsupport
  assert:
    that: kubernetes_version.stdout is version('v1.16.3', '<')
    msg: The current k8s version is not supported

- name: check helm status
  shell: >
    {{ bin_dir }}/helm list
  register: helm_check
  ignore_errors: yes

- name: Stop if Helm is not available
  assert:
    that: helm_check.rc == 0
    msg: Helm is not available

- name: check storage class
  shell: >
    {{ bin_dir }}/kubectl get sc | awk '{if(NR>1){print $1}}'
  register: storage_class_check

- name: Stop if StorageClass was not found
  assert:
    that: persistence.storageClass in storage_class_check.stdout_lines
    msg: "StorageClass {{ persistence.storageClass }}  was not found !"
  when:
    - persistence.storageClass is defined
    - persistence.storageClass != ""

- name: check default storage class
  shell: >
    {{ bin_dir }}/kubectl get sc
  register: default_storage_class_check

- name: Stop if defaultStorageClass was not found
  assert:
    that: '"(default)" in default_storage_class_check.stdout'
    msg: "Default StorageClass was not found !"
  when:
    - persistence.storageClass is defined
    - persistence.storageClass == ""

- name: check kubesphere ca secret
  shell: >
    {{ bin_dir }}/kubectl get secret -n kubesphere-system | awk '{if(NR>1){print $1}}'
  register: kubesphere_ca_secret
  when:
    - devops.enabled is defined
    - devops.enabled

- name: Stop if kubesphere ca secret was not found
  assert:
    that: '"kubesphere-ca" in kubesphere_ca_secret.stdout'
    msg: "Please create the Secret of CA certificate of your current Kubernetes cluster, if devops is enabled."
  when:
    - devops.enabled is defined
    - devops.enabled